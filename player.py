import os
import random
import math

import pygame as pg

MAPPINGS = {0: [(8, -8), (7, -8), (8, -7), (6, -8), (7, -7), (8, -6), (5, -8), (6, -7), (7, -6), (8, -5), (4, -8), (5, -7), (6, -6), (7, -5), (8, -4), (3, -8), (4, -7), (5, -6), (6, -5), (7, -4), (8, -3), (2, -8), (3, -7), (4, -6), (5, -5), (6, -4), (7, -3), (8, -2), (1, -8), (2, -7), (3, -6), (4, -5), (5, -4), (6, -3), (7, -2), (8, -1), (0, -8), (1, -7), (2, -6), (3, -5), (4, -4), (5, -3), (6, -2), (7, -1), (8, 0), (-1, -8), (0, -7), (1, -6), (2, -5), (3, -4), (4, -3), (5, -2), (6, -1), (7, 0), (8, 1), (-2, -8), (-1, -7), (0, -6), (1, -5), (2, -4), (3, -3), (4, -2), (5, -1), (6, 0), (7, 1), (8, 2), (-3, -8), (-2, -7), (-1, -6), (0, -5), (1, -4), (2, -3), (3, -2), (4, -1), (5, 0), (6, 1), (7, 2), (8, 3), (-4, -8), (-3, -7), (-2, -6), (-1, -5), (0, -4), (1, -3), (2, -2), (3, -1), (4, 0), (5, 1), (6, 2), (7, 3), (8, 4), (-5, -8), (-4, -7), (-3, -6), (-2, -5), (-1, -4), (0, -3), (1, -2), (2, -1), (3, 0), (4, 1), (5, 2), (6, 3), (7, 4), (8, 5), (-6, -8), (-5, -7), (-4, -6), (-3, -5), (-2, -4), (-1, -3), (0, -2), (1, -1), (2, 0), (3, 1), (4, 2), (5, 3), (6, 4), (7, 5), (8, 6), (-7, -8), (-6, -7), (-5, -6), (-4, -5), (-3, -4), (-2, -3), (-1, -2), (0, -1), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (-8, -8), (-7, -7), (-6, -6), (-5, -5), (-4, -4), (-3, -3), (-2, -2), (-1, -1), (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (-8, -7), (-7, -6), (-6, -5), (-5, -4), (-4, -3), (-3, -2), (-2, -1), (-1, 0), (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (-8, -6), (-7, -5), (-6, -4), (-5, -3), (-4, -2), (-3, -1), (-2, 0), (-1, 1), (0, 2), (1, 3), (2, 4), (3, 5), (4, 6), (5, 7), (6, 8), (-8, -5), (-7, -4), (-6, -3), (-5, -2), (-4, -1), (-3, 0), (-2, 1), (-1, 2), (0, 3), (1, 4), (2, 5), (3, 6), (4, 7), (5, 8), (-8, -4), (-7, -3), (-6, -2), (-5, -1), (-4, 0), (-3, 1), (-2, 2), (-1, 3), (0, 4), (1, 5), (2, 6), (3, 7), (4, 8), (-8, -3), (-7, -2), (-6, -1), (-5, 0), (-4, 1), (-3, 2), (-2, 3), (-1, 4), (0, 5), (1, 6), (2, 7), (3, 8), (-8, -2), (-7, -1), (-6, 0), (-5, 1), (-4, 2), (-3, 3), (-2, 4), (-1, 5), (0, 6), (1, 7), (2, 8), (-8, -1), (-7, 0), (-6, 1), (-5, 2), (-4, 3), (-3, 4), (-2, 5), (-1, 6), (0, 7), (1, 8), (-8, 0), (-7, 1), (-6, 2), (-5, 3), (-4, 4), (-3, 5), (-2, 6), (-1, 7), (0, 8), (-8, 1), (-7, 2), (-6, 3), (-5, 4), (-4, 5), (-3, 6), (-2, 7), (-1, 8), (-8, 2), (-7, 3), (-6, 4), (-5, 5), (-4, 6), (-3, 7), (-2, 8), (-8, 3), (-7, 4), (-6, 5), (-5, 6), (-4, 7), (-3, 8), (-8, 4), (-7, 5), (-6, 6), (-5, 7), (-4, 8), (-8, 5), (-7, 6), (-6, 7), (-5, 8), (-8, 6), (-7, 7), (-6, 8), (-8, 7), (-7, 8), (-8, 8)], 1: [(8, -8), (8, -7), (7, -8), (8, -6), (7, -7), (6, -8), (8, -5), (7, -6), (6, -7), (5, -8), (8, -4), (7, -5), (6, -6), (5, -7), (4, -8), (8, -3), (7, -4), (6, -5), (5, -6), (4, -7), (3, -8), (8, -2), (7, -3), (6, -4), (5, -5), (4, -6), (3, -7), (2, -8), (8, -1), (7, -2), (6, -3), (5, -4), (4, -5), (3, -6), (2, -7), (1, -8), (8, 0), (7, -1), (6, -2), (5, -3), (4, -4), (3, -5), (2, -6), (1, -7), (0, -8), (8, 1), (7, 0), (6, -1), (5, -2), (4, -3), (3, -4), (2, -5), (1, -6), (0, -7), (-1, -8), (8, 2), (7, 1), (6, 0), (5, -1), (4, -2), (3, -3), (2, -4), (1, -5), (0, -6), (-1, -7), (-2, -8), (8, 3), (7, 2), (6, 1), (5, 0), (4, -1), (3, -2), (2, -3), (1, -4), (0, -5), (-1, -6), (-2, -7), (-3, -8), (8, 4), (7, 3), (6, 2), (5, 1), (4, 0), (3, -1), (2, -2), (1, -3), (0, -4), (-1, -5), (-2, -6), (-3, -7), (-4, -8), (8, 5), (7, 4), (6, 3), (5, 2), (4, 1), (3, 0), (2, -1), (1, -2), (0, -3), (-1, -4), (-2, -5), (-3, -6), (-4, -7), (-5, -8), (8, 6), (7, 5), (6, 4), (5, 3), (4, 2), (3, 1), (2, 0), (1, -1), (0, -2), (-1, -3), (-2, -4), (-3, -5), (-4, -6), (-5, -7), (-6, -8), (8, 7), (7, 6), (6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (1, 0), (0, -1), (-1, -2), (-2, -3), (-3, -4), (-4, -5), (-5, -6), (-6, -7), (-7, -8), (8, 8), (7, 7), (6, 6), (5, 5), (4, 4), (3, 3), (2, 2), (1, 1), (0, 0), (-1, -1), (-2, -2), (-3, -3), (-4, -4), (-5, -5), (-6, -6), (-7, -7), (-8, -8), (7, 8), (6, 7), (5, 6), (4, 5), (3, 4), (2, 3), (1, 2), (0, 1), (-1, 0), (-2, -1), (-3, -2), (-4, -3), (-5, -4), (-6, -5), (-7, -6), (-8, -7), (6, 8), (5, 7), (4, 6), (3, 5), (2, 4), (1, 3), (0, 2), (-1, 1), (-2, 0), (-3, -1), (-4, -2), (-5, -3), (-6, -4), (-7, -5), (-8, -6), (5, 8), (4, 7), (3, 6), (2, 5), (1, 4), (0, 3), (-1, 2), (-2, 1), (-3, 0), (-4, -1), (-5, -2), (-6, -3), (-7, -4), (-8, -5), (4, 8), (3, 7), (2, 6), (1, 5), (0, 4), (-1, 3), (-2, 2), (-3, 1), (-4, 0), (-5, -1), (-6, -2), (-7, -3), (-8, -4), (3, 8), (2, 7), (1, 6), (0, 5), (-1, 4), (-2, 3), (-3, 2), (-4, 1), (-5, 0), (-6, -1), (-7, -2), (-8, -3), (2, 8), (1, 7), (0, 6), (-1, 5), (-2, 4), (-3, 3), (-4, 2), (-5, 1), (-6, 0), (-7, -1), (-8, -2), (1, 8), (0, 7), (-1, 6), (-2, 5), (-3, 4), (-4, 3), (-5, 2), (-6, 1), (-7, 0), (-8, -1), (0, 8), (-1, 7), (-2, 6), (-3, 5), (-4, 4), (-5, 3), (-6, 2), (-7, 1), (-8, 0), (-1, 8), (-2, 7), (-3, 6), (-4, 5), (-5, 4), (-6, 3), (-7, 2), (-8, 1), (-2, 8), (-3, 7), (-4, 6), (-5, 5), (-6, 4), (-7, 3), (-8, 2), (-3, 8), (-4, 7), (-5, 6), (-6, 5), (-7, 4), (-8, 3), (-4, 8), (-5, 7), (-6, 6), (-7, 5), (-8, 4), (-5, 8), (-6, 7), (-7, 6), (-8, 5), (-6, 8), (-7, 7), (-8, 6), (-7, 8), (-8, 7), (-8, 8)], 2: [(7, 8), (8, 7), (6, 8), (8, 8), (7, 7), (8, 6), (5, 8), (6, 7), (7, 6), (8, 5), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (3, 8), (4, 7), (5, 6), (6, 5), (7, 4), (8, 3), (2, 8), (3, 7), (4, 6), (5, 5), (6, 4), (7, 3), (8, 2), (1, 8), (2, 7), (3, 6), (4, 5), (5, 4), (6, 3), (7, 2), (8, 1), (0, 8), (1, 7), (2, 6), (3, 5), (4, 4), (5, 3), (6, 2), (7, 1), (8, 0), (-1, 8), (0, 7), (1, 6), (2, 5), (3, 4), (4, 3), (5, 2), (6, 1), (7, 0), (8, -1), (-2, 8), (-1, 7), (0, 6), (1, 5), (2, 4), (3, 3), (4, 2), (5, 1), (6, 0), (7, -1), (8, -2), (-3, 8), (-2, 7), (-1, 6), (0, 5), (1, 4), (2, 3), (3, 2), (4, 1), (5, 0), (6, -1), (7, -2), (8, -3), (-4, 8), (-3, 7), (-2, 6), (-1, 5), (0, 4), (1, 3), (2, 2), (3, 1), (4, 0), (5, -1), (6, -2), (7, -3), (8, -4), (-5, 8), (-4, 7), (-3, 6), (-2, 5), (-1, 4), (0, 3), (1, 2), (2, 1), (3, 0), (4, -1), (5, -2), (6, -3), (7, -4), (8, -5), (-6, 8), (-5, 7), (-4, 6), (-3, 5), (-2, 4), (-1, 3), (0, 2), (1, 1), (2, 0), (3, -1), (4, -2), (5, -3), (6, -4), (7, -5), (8, -6), (-7, 8), (-6, 7), (-5, 6), (-4, 5), (-3, 4), (-2, 3), (-1, 2), (0, 1), (1, 0), (2, -1), (3, -2), (4, -3), (5, -4), (6, -5), (7, -6), (8, -7), (-8, 8), (-7, 7), (-6, 6), (-5, 5), (-4, 4), (-3, 3), (-2, 2), (-1, 1), (0, 0), (1, -1), (2, -2), (3, -3), (4, -4), (5, -5), (6, -6), (7, -7), (8, -8), (-8, 7), (-7, 6), (-6, 5), (-5, 4), (-4, 3), (-3, 2), (-2, 1), (-1, 0), (0, -1), (1, -2), (2, -3), (3, -4), (4, -5), (5, -6), (6, -7), (7, -8), (-8, 6), (-7, 5), (-6, 4), (-5, 3), (-4, 2), (-3, 1), (-2, 0), (-1, -1), (0, -2), (1, -3), (2, -4), (3, -5), (4, -6), (5, -7), (6, -8), (-8, 5), (-7, 4), (-6, 3), (-5, 2), (-4, 1), (-3, 0), (-2, -1), (-1, -2), (0, -3), (1, -4), (2, -5), (3, -6), (4, -7), (5, -8), (-8, 4), (-7, 3), (-6, 2), (-5, 1), (-4, 0), (-3, -1), (-2, -2), (-1, -3), (0, -4), (1, -5), (2, -6), (3, -7), (4, -8), (-8, 3), (-7, 2), (-6, 1), (-5, 0), (-4, -1), (-3, -2), (-2, -3), (-1, -4), (0, -5), (1, -6), (2, -7), (3, -8), (-8, 2), (-7, 1), (-6, 0), (-5, -1), (-4, -2), (-3, -3), (-2, -4), (-1, -5), (0, -6), (1, -7), (2, -8), (-8, 1), (-7, 0), (-6, -1), (-5, -2), (-4, -3), (-3, -4), (-2, -5), (-1, -6), (0, -7), (1, -8), (-8, 0), (-7, -1), (-6, -2), (-5, -3), (-4, -4), (-3, -5), (-2, -6), (-1, -7), (0, -8), (-8, -1), (-7, -2), (-6, -3), (-5, -4), (-4, -5), (-3, -6), (-2, -7), (-1, -8), (-8, -2), (-7, -3), (-6, -4), (-5, -5), (-4, -6), (-3, -7), (-2, -8), (-8, -3), (-7, -4), (-6, -5), (-5, -6), (-4, -7), (-3, -8), (-8, -4), (-7, -5), (-6, -6), (-5, -7), (-4, -8), (-8, -5), (-7, -6), (-6, -7), (-5, -8), (-8, -6), (-7, -7), (-6, -8), (-8, -7), (-7, -8), (-8, -8)], 3: [(8, 7), (7, 8), (8, 8), (8, 6), (7, 7), (6, 8), (8, 5), (7, 6), (6, 7), (5, 8), (8, 4), (7, 5), (6, 6), (5, 7), (4, 8), (8, 3), (7, 4), (6, 5), (5, 6), (4, 7), (3, 8), (8, 2), (7, 3), (6, 4), (5, 5), (4, 6), (3, 7), (2, 8), (8, 1), (7, 2), (6, 3), (5, 4), (4, 5), (3, 6), (2, 7), (1, 8), (8, 0), (7, 1), (6, 2), (5, 3), (4, 4), (3, 5), (2, 6), (1, 7), (0, 8), (8, -1), (7, 0), (6, 1), (5, 2), (4, 3), (3, 4), (2, 5), (1, 6), (0, 7), (-1, 8), (8, -2), (7, -1), (6, 0), (5, 1), (4, 2), (3, 3), (2, 4), (1, 5), (0, 6), (-1, 7), (-2, 8), (8, -3), (7, -2), (6, -1), (5, 0), (4, 1), (3, 2), (2, 3), (1, 4), (0, 5), (-1, 6), (-2, 7), (-3, 8), (8, -4), (7, -3), (6, -2), (5, -1), (4, 0), (3, 1), (2, 2), (1, 3), (0, 4), (-1, 5), (-2, 6), (-3, 7), (-4, 8), (8, -5), (7, -4), (6, -3), (5, -2), (4, -1), (3, 0), (2, 1), (1, 2), (0, 3), (-1, 4), (-2, 5), (-3, 6), (-4, 7), (-5, 8), (8, -6), (7, -5), (6, -4), (5, -3), (4, -2), (3, -1), (2, 0), (1, 1), (0, 2), (-1, 3), (-2, 4), (-3, 5), (-4, 6), (-5, 7), (-6, 8), (8, -7), (7, -6), (6, -5), (5, -4), (4, -3), (3, -2), (2, -1), (1, 0), (0, 1), (-1, 2), (-2, 3), (-3, 4), (-4, 5), (-5, 6), (-6, 7), (-7, 8), (8, -8), (7, -7), (6, -6), (5, -5), (4, -4), (3, -3), (2, -2), (1, -1), (0, 0), (-1, 1), (-2, 2), (-3, 3), (-4, 4), (-5, 5), (-6, 6), (-7, 7), (-8, 8), (7, -8), (6, -7), (5, -6), (4, -5), (3, -4), (2, -3), (1, -2), (0, -1), (-1, 0), (-2, 1), (-3, 2), (-4, 3), (-5, 4), (-6, 5), (-7, 6), (-8, 7), (6, -8), (5, -7), (4, -6), (3, -5), (2, -4), (1, -3), (0, -2), (-1, -1), (-2, 0), (-3, 1), (-4, 2), (-5, 3), (-6, 4), (-7, 5), (-8, 6), (5, -8), (4, -7), (3, -6), (2, -5), (1, -4), (0, -3), (-1, -2), (-2, -1), (-3, 0), (-4, 1), (-5, 2), (-6, 3), (-7, 4), (-8, 5), (4, -8), (3, -7), (2, -6), (1, -5), (0, -4), (-1, -3), (-2, -2), (-3, -1), (-4, 0), (-5, 1), (-6, 2), (-7, 3), (-8, 4), (3, -8), (2, -7), (1, -6), (0, -5), (-1, -4), (-2, -3), (-3, -2), (-4, -1), (-5, 0), (-6, 1), (-7, 2), (-8, 3), (2, -8), (1, -7), (0, -6), (-1, -5), (-2, -4), (-3, -3), (-4, -2), (-5, -1), (-6, 0), (-7, 1), (-8, 2), (1, -8), (0, -7), (-1, -6), (-2, -5), (-3, -4), (-4, -3), (-5, -2), (-6, -1), (-7, 0), (-8, 1), (0, -8), (-1, -7), (-2, -6), (-3, -5), (-4, -4), (-5, -3), (-6, -2), (-7, -1), (-8, 0), (-1, -8), (-2, -7), (-3, -6), (-4, -5), (-5, -4), (-6, -3), (-7, -2), (-8, -1), (-2, -8), (-3, -7), (-4, -6), (-5, -5), (-6, -4), (-7, -3), (-8, -2), (-3, -8), (-4, -7), (-5, -6), (-6, -5), (-7, -4), (-8, -3), (-4, -8), (-5, -7), (-6, -6), (-7, -5), (-8, -4), (-5, -8), (-6, -7), (-7, -6), (-8, -5), (-6, -8), (-7, -7), (-8, -6), (-7, -8), (-8, -7), (-8, -8)], 4: [(-8, 8), (-7, 8), (-8, 7), (-6, 8), (-7, 7), (-8, 6), (-5, 8), (-6, 7), (-7, 6), (-8, 5), (-4, 8), (-5, 7), (-6, 6), (-7, 5), (-8, 4), (-3, 8), (-4, 7), (-5, 6), (-6, 5), (-7, 4), (-8, 3), (-2, 8), (-3, 7), (-4, 6), (-5, 5), (-6, 4), (-7, 3), (-8, 2), (-1, 8), (-2, 7), (-3, 6), (-4, 5), (-5, 4), (-6, 3), (-7, 2), (-8, 1), (0, 8), (-1, 7), (-2, 6), (-3, 5), (-4, 4), (-5, 3), (-6, 2), (-7, 1), (-8, 0), (1, 8), (0, 7), (-1, 6), (-2, 5), (-3, 4), (-4, 3), (-5, 2), (-6, 1), (-7, 0), (-8, -1), (2, 8), (1, 7), (0, 6), (-1, 5), (-2, 4), (-3, 3), (-4, 2), (-5, 1), (-6, 0), (-7, -1), (-8, -2), (3, 8), (2, 7), (1, 6), (0, 5), (-1, 4), (-2, 3), (-3, 2), (-4, 1), (-5, 0), (-6, -1), (-7, -2), (-8, -3), (4, 8), (3, 7), (2, 6), (1, 5), (0, 4), (-1, 3), (-2, 2), (-3, 1), (-4, 0), (-5, -1), (-6, -2), (-7, -3), (-8, -4), (5, 8), (4, 7), (3, 6), (2, 5), (1, 4), (0, 3), (-1, 2), (-2, 1), (-3, 0), (-4, -1), (-5, -2), (-6, -3), (-7, -4), (-8, -5), (6, 8), (5, 7), (4, 6), (3, 5), (2, 4), (1, 3), (0, 2), (-1, 1), (-2, 0), (-3, -1), (-4, -2), (-5, -3), (-6, -4), (-7, -5), (-8, -6), (7, 8), (6, 7), (5, 6), (4, 5), (3, 4), (2, 3), (1, 2), (0, 1), (-1, 0), (-2, -1), (-3, -2), (-4, -3), (-5, -4), (-6, -5), (-7, -6), (-8, -7), (8, 8), (7, 7), (6, 6), (5, 5), (4, 4), (3, 3), (2, 2), (1, 1), (0, 0), (-1, -1), (-2, -2), (-3, -3), (-4, -4), (-5, -5), (-6, -6), (-7, -7), (-8, -8), (8, 7), (7, 6), (6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (1, 0), (0, -1), (-1, -2), (-2, -3), (-3, -4), (-4, -5), (-5, -6), (-6, -7), (-7, -8), (8, 6), (7, 5), (6, 4), (5, 3), (4, 2), (3, 1), (2, 0), (1, -1), (0, -2), (-1, -3), (-2, -4), (-3, -5), (-4, -6), (-5, -7), (-6, -8), (8, 5), (7, 4), (6, 3), (5, 2), (4, 1), (3, 0), (2, -1), (1, -2), (0, -3), (-1, -4), (-2, -5), (-3, -6), (-4, -7), (-5, -8), (8, 4), (7, 3), (6, 2), (5, 1), (4, 0), (3, -1), (2, -2), (1, -3), (0, -4), (-1, -5), (-2, -6), (-3, -7), (-4, -8), (8, 3), (7, 2), (6, 1), (5, 0), (4, -1), (3, -2), (2, -3), (1, -4), (0, -5), (-1, -6), (-2, -7), (-3, -8), (8, 2), (7, 1), (6, 0), (5, -1), (4, -2), (3, -3), (2, -4), (1, -5), (0, -6), (-1, -7), (-2, -8), (8, 1), (7, 0), (6, -1), (5, -2), (4, -3), (3, -4), (2, -5), (1, -6), (0, -7), (-1, -8), (8, 0), (7, -1), (6, -2), (5, -3), (4, -4), (3, -5), (2, -6), (1, -7), (0, -8), (8, -1), (7, -2), (6, -3), (5, -4), (4, -5), (3, -6), (2, -7), (1, -8), (8, -2), (7, -3), (6, -4), (5, -5), (4, -6), (3, -7), (2, -8), (8, -3), (7, -4), (6, -5), (5, -6), (4, -7), (3, -8), (8, -4), (7, -5), (6, -6), (5, -7), (4, -8), (8, -5), (7, -6), (6, -7), (5, -8), (8, -6), (7, -7), (6, -8), (8, -7), (7, -8), (8, -8)], 5: [(-8, 8), (-7, 8), (-8, 7), (-6, 8), (-7, 7), (-8, 6), (-5, 8), (-6, 7), (-7, 6), (-8, 5), (-4, 8), (-5, 7), (-6, 6), (-7, 5), (-8, 4), (-3, 8), (-4, 7), (-5, 6), (-6, 5), (-7, 4), (-8, 3), (-2, 8), (-3, 7), (-4, 6), (-5, 5), (-6, 4), (-7, 3), (-8, 2), (-1, 8), (-2, 7), (-3, 6), (-4, 5), (-5, 4), (-6, 3), (-7, 2), (-8, 1), (0, 8), (-1, 7), (-2, 6), (-3, 5), (-4, 4), (-5, 3), (-6, 2), (-7, 1), (-8, 0), (1, 8), (0, 7), (-1, 6), (-2, 5), (-3, 4), (-4, 3), (-5, 2), (-6, 1), (-7, 0), (-8, -1), (2, 8), (1, 7), (0, 6), (-1, 5), (-2, 4), (-3, 3), (-4, 2), (-5, 1), (-6, 0), (-7, -1), (-8, -2), (3, 8), (2, 7), (1, 6), (0, 5), (-1, 4), (-2, 3), (-3, 2), (-4, 1), (-5, 0), (-6, -1), (-7, -2), (-8, -3), (4, 8), (3, 7), (2, 6), (1, 5), (0, 4), (-1, 3), (-2, 2), (-3, 1), (-4, 0), (-5, -1), (-6, -2), (-7, -3), (-8, -4), (5, 8), (4, 7), (3, 6), (2, 5), (1, 4), (0, 3), (-1, 2), (-2, 1), (-3, 0), (-4, -1), (-5, -2), (-6, -3), (-7, -4), (-8, -5), (6, 8), (5, 7), (4, 6), (3, 5), (2, 4), (1, 3), (0, 2), (-1, 1), (-2, 0), (-3, -1), (-4, -2), (-5, -3), (-6, -4), (-7, -5), (-8, -6), (7, 8), (6, 7), (5, 6), (4, 5), (3, 4), (2, 3), (1, 2), (0, 1), (-1, 0), (-2, -1), (-3, -2), (-4, -3), (-5, -4), (-6, -5), (-7, -6), (-8, -7), (8, 8), (7, 7), (6, 6), (5, 5), (4, 4), (3, 3), (2, 2), (1, 1), (0, 0), (-1, -1), (-2, -2), (-3, -3), (-4, -4), (-5, -5), (-6, -6), (-7, -7), (-8, -8), (8, 7), (7, 6), (6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (1, 0), (0, -1), (-1, -2), (-2, -3), (-3, -4), (-4, -5), (-5, -6), (-6, -7), (-7, -8), (8, 6), (7, 5), (6, 4), (5, 3), (4, 2), (3, 1), (2, 0), (1, -1), (0, -2), (-1, -3), (-2, -4), (-3, -5), (-4, -6), (-5, -7), (-6, -8), (8, 5), (7, 4), (6, 3), (5, 2), (4, 1), (3, 0), (2, -1), (1, -2), (0, -3), (-1, -4), (-2, -5), (-3, -6), (-4, -7), (-5, -8), (8, 4), (7, 3), (6, 2), (5, 1), (4, 0), (3, -1), (2, -2), (1, -3), (0, -4), (-1, -5), (-2, -6), (-3, -7), (-4, -8), (8, 3), (7, 2), (6, 1), (5, 0), (4, -1), (3, -2), (2, -3), (1, -4), (0, -5), (-1, -6), (-2, -7), (-3, -8), (8, 2), (7, 1), (6, 0), (5, -1), (4, -2), (3, -3), (2, -4), (1, -5), (0, -6), (-1, -7), (-2, -8), (8, 1), (7, 0), (6, -1), (5, -2), (4, -3), (3, -4), (2, -5), (1, -6), (0, -7), (-1, -8), (8, 0), (7, -1), (6, -2), (5, -3), (4, -4), (3, -5), (2, -6), (1, -7), (0, -8), (8, -1), (7, -2), (6, -3), (5, -4), (4, -5), (3, -6), (2, -7), (1, -8), (8, -2), (7, -3), (6, -4), (5, -5), (4, -6), (3, -7), (2, -8), (8, -3), (7, -4), (6, -5), (5, -6), (4, -7), (3, -8), (8, -4), (7, -5), (6, -6), (5, -7), (4, -8), (8, -5), (7, -6), (6, -7), (5, -8), (8, -6), (7, -7), (6, -8), (8, -7), (7, -8), (8, -8)], 6: [(-8, -7), (-7, -8), (-8, -6), (-7, -7), (-8, -8), (-6, -8), (-8, -5), (-7, -6), (-6, -7), (-5, -8), (-8, -4), (-7, -5), (-6, -6), (-5, -7), (-4, -8), (-8, -3), (-7, -4), (-6, -5), (-5, -6), (-4, -7), (-3, -8), (-8, -2), (-7, -3), (-6, -4), (-5, -5), (-4, -6), (-3, -7), (-2, -8), (-8, -1), (-7, -2), (-6, -3), (-5, -4), (-4, -5), (-3, -6), (-2, -7), (-1, -8), (-8, 0), (-7, -1), (-6, -2), (-5, -3), (-4, -4), (-3, -5), (-2, -6), (-1, -7), (0, -8), (-8, 1), (-7, 0), (-6, -1), (-5, -2), (-4, -3), (-3, -4), (-2, -5), (-1, -6), (0, -7), (1, -8), (-8, 2), (-7, 1), (-6, 0), (-5, -1), (-4, -2), (-3, -3), (-2, -4), (-1, -5), (0, -6), (1, -7), (2, -8), (-8, 3), (-7, 2), (-6, 1), (-5, 0), (-4, -1), (-3, -2), (-2, -3), (-1, -4), (0, -5), (1, -6), (2, -7), (3, -8), (-8, 4), (-7, 3), (-6, 2), (-5, 1), (-4, 0), (-3, -1), (-2, -2), (-1, -3), (0, -4), (1, -5), (2, -6), (3, -7), (4, -8), (-8, 5), (-7, 4), (-6, 3), (-5, 2), (-4, 1), (-3, 0), (-2, -1), (-1, -2), (0, -3), (1, -4), (2, -5), (3, -6), (4, -7), (5, -8), (-8, 6), (-7, 5), (-6, 4), (-5, 3), (-4, 2), (-3, 1), (-2, 0), (-1, -1), (0, -2), (1, -3), (2, -4), (3, -5), (4, -6), (5, -7), (6, -8), (-8, 7), (-7, 6), (-6, 5), (-5, 4), (-4, 3), (-3, 2), (-2, 1), (-1, 0), (0, -1), (1, -2), (2, -3), (3, -4), (4, -5), (5, -6), (6, -7), (7, -8), (-8, 8), (-7, 7), (-6, 6), (-5, 5), (-4, 4), (-3, 3), (-2, 2), (-1, 1), (0, 0), (1, -1), (2, -2), (3, -3), (4, -4), (5, -5), (6, -6), (7, -7), (8, -8), (-7, 8), (-6, 7), (-5, 6), (-4, 5), (-3, 4), (-2, 3), (-1, 2), (0, 1), (1, 0), (2, -1), (3, -2), (4, -3), (5, -4), (6, -5), (7, -6), (8, -7), (-6, 8), (-5, 7), (-4, 6), (-3, 5), (-2, 4), (-1, 3), (0, 2), (1, 1), (2, 0), (3, -1), (4, -2), (5, -3), (6, -4), (7, -5), (8, -6), (-5, 8), (-4, 7), (-3, 6), (-2, 5), (-1, 4), (0, 3), (1, 2), (2, 1), (3, 0), (4, -1), (5, -2), (6, -3), (7, -4), (8, -5), (-4, 8), (-3, 7), (-2, 6), (-1, 5), (0, 4), (1, 3), (2, 2), (3, 1), (4, 0), (5, -1), (6, -2), (7, -3), (8, -4), (-3, 8), (-2, 7), (-1, 6), (0, 5), (1, 4), (2, 3), (3, 2), (4, 1), (5, 0), (6, -1), (7, -2), (8, -3), (-2, 8), (-1, 7), (0, 6), (1, 5), (2, 4), (3, 3), (4, 2), (5, 1), (6, 0), (7, -1), (8, -2), (-1, 8), (0, 7), (1, 6), (2, 5), (3, 4), (4, 3), (5, 2), (6, 1), (7, 0), (8, -1), (0, 8), (1, 7), (2, 6), (3, 5), (4, 4), (5, 3), (6, 2), (7, 1), (8, 0), (1, 8), (2, 7), (3, 6), (4, 5), (5, 4), (6, 3), (7, 2), (8, 1), (2, 8), (3, 7), (4, 6), (5, 5), (6, 4), (7, 3), (8, 2), (3, 8), (4, 7), (5, 6), (6, 5), (7, 4), (8, 3), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (5, 8), (6, 7), (7, 6), (8, 5), (6, 8), (7, 7), (8, 6), (7, 8), (8, 7), (8, 8)], 7: [(-7, -8), (-8, -7), (-6, -8), (-7, -7), (-8, -8), (-8, -6), (-5, -8), (-6, -7), (-7, -6), (-8, -5), (-4, -8), (-5, -7), (-6, -6), (-7, -5), (-8, -4), (-3, -8), (-4, -7), (-5, -6), (-6, -5), (-7, -4), (-8, -3), (-2, -8), (-3, -7), (-4, -6), (-5, -5), (-6, -4), (-7, -3), (-8, -2), (-1, -8), (-2, -7), (-3, -6), (-4, -5), (-5, -4), (-6, -3), (-7, -2), (-8, -1), (0, -8), (-1, -7), (-2, -6), (-3, -5), (-4, -4), (-5, -3), (-6, -2), (-7, -1), (-8, 0), (1, -8), (0, -7), (-1, -6), (-2, -5), (-3, -4), (-4, -3), (-5, -2), (-6, -1), (-7, 0), (-8, 1), (2, -8), (1, -7), (0, -6), (-1, -5), (-2, -4), (-3, -3), (-4, -2), (-5, -1), (-6, 0), (-7, 1), (-8, 2), (3, -8), (2, -7), (1, -6), (0, -5), (-1, -4), (-2, -3), (-3, -2), (-4, -1), (-5, 0), (-6, 1), (-7, 2), (-8, 3), (4, -8), (3, -7), (2, -6), (1, -5), (0, -4), (-1, -3), (-2, -2), (-3, -1), (-4, 0), (-5, 1), (-6, 2), (-7, 3), (-8, 4), (5, -8), (4, -7), (3, -6), (2, -5), (1, -4), (0, -3), (-1, -2), (-2, -1), (-3, 0), (-4, 1), (-5, 2), (-6, 3), (-7, 4), (-8, 5), (6, -8), (5, -7), (4, -6), (3, -5), (2, -4), (1, -3), (0, -2), (-1, -1), (-2, 0), (-3, 1), (-4, 2), (-5, 3), (-6, 4), (-7, 5), (-8, 6), (7, -8), (6, -7), (5, -6), (4, -5), (3, -4), (2, -3), (1, -2), (0, -1), (-1, 0), (-2, 1), (-3, 2), (-4, 3), (-5, 4), (-6, 5), (-7, 6), (-8, 7), (8, -8), (7, -7), (6, -6), (5, -5), (4, -4), (3, -3), (2, -2), (1, -1), (0, 0), (-1, 1), (-2, 2), (-3, 3), (-4, 4), (-5, 5), (-6, 6), (-7, 7), (-8, 8), (8, -7), (7, -6), (6, -5), (5, -4), (4, -3), (3, -2), (2, -1), (1, 0), (0, 1), (-1, 2), (-2, 3), (-3, 4), (-4, 5), (-5, 6), (-6, 7), (-7, 8), (8, -6), (7, -5), (6, -4), (5, -3), (4, -2), (3, -1), (2, 0), (1, 1), (0, 2), (-1, 3), (-2, 4), (-3, 5), (-4, 6), (-5, 7), (-6, 8), (8, -5), (7, -4), (6, -3), (5, -2), (4, -1), (3, 0), (2, 1), (1, 2), (0, 3), (-1, 4), (-2, 5), (-3, 6), (-4, 7), (-5, 8), (8, -4), (7, -3), (6, -2), (5, -1), (4, 0), (3, 1), (2, 2), (1, 3), (0, 4), (-1, 5), (-2, 6), (-3, 7), (-4, 8), (8, -3), (7, -2), (6, -1), (5, 0), (4, 1), (3, 2), (2, 3), (1, 4), (0, 5), (-1, 6), (-2, 7), (-3, 8), (8, -2), (7, -1), (6, 0), (5, 1), (4, 2), (3, 3), (2, 4), (1, 5), (0, 6), (-1, 7), (-2, 8), (8, -1), (7, 0), (6, 1), (5, 2), (4, 3), (3, 4), (2, 5), (1, 6), (0, 7), (-1, 8), (8, 0), (7, 1), (6, 2), (5, 3), (4, 4), (3, 5), (2, 6), (1, 7), (0, 8), (8, 1), (7, 2), (6, 3), (5, 4), (4, 5), (3, 6), (2, 7), (1, 8), (8, 2), (7, 3), (6, 4), (5, 5), (4, 6), (3, 7), (2, 8), (8, 3), (7, 4), (6, 5), (5, 6), (4, 7), (3, 8), (8, 4), (7, 5), (6, 6), (5, 7), (4, 8), (8, 5), (7, 6), (6, 7), (5, 8), (8, 6), (7, 7), (6, 8), (8, 7), (7, 8), (8, 8)]}

class Player():
    def __init__(self,version,sprites): #sprite_list,current_dir):
        self.version = version
        self.pos = [0,0]
        self.world = []
        self.sprites = {}
        self.font = pg.font.Font(os.path.join("res","verdana.ttf"),16)
        self.sprites = sprites#self.load_sprites(sprite_list,current_dir)
        self.angle = 0
        self.ficticious_angle = 0
        self.debug = False
        self.controlling_tram = -1

    def load_sprites(self,sprite_list,current_dir):
        pass
                
                
    
    def draw(self,screen,objects,clock,controlled_tram,tram_info):
        w,h = screen.get_size()
        screen.fill((128,128,128))

        visible_objects = []

        for object in objects:
            if self.camera_pos[0]-7*128 <= object["pos"][0] <= self.camera_pos[0]+7*128 and self.camera_pos[1]-7*128 <= object["pos"][1] <= self.camera_pos[1]+7*128:
                visible_objects.append(object)

        for x_coord, y_coord in MAPPINGS[int(self.angle/45)]:
            tile_coordinates = (int((self.camera_pos[0]-(127 if self.camera_pos[0]< 0 else 0))/128)+x_coord,int((self.camera_pos[1]-(127 if self.camera_pos[1]< 0 else 0))/128)+y_coord)

            base_tile_blit_coords = (
                w/2+(x_coord*128-int(self.camera_pos[0])%128)*math.cos(math.radians(self.angle))+(y_coord*128-int(self.camera_pos[1])%128)*math.sin(math.radians(self.angle)),
                h/2-(x_coord*128-int(self.camera_pos[0])%128)*math.sin(math.radians(self.angle))+(y_coord*128-int(self.camera_pos[1])%128)*math.cos(math.radians(self.angle))
            )
            centered_coords = (
                w/2+(x_coord*128-int(self.camera_pos[0])%128+64)*math.cos(math.radians(self.angle))+(y_coord*128-int(self.camera_pos[1])%128+64)*math.sin(math.radians(self.angle)),
                h/2-(x_coord*128-int(self.camera_pos[0])%128+64)*math.sin(math.radians(self.angle))+(y_coord*128-int(self.camera_pos[1])%128+64)*math.cos(math.radians(self.angle))
            )

            if tile_coordinates in self.world:
                size = self.sprites[self.world[tile_coordinates]][self.angle].get_size()
                offset_horizontal = (x_coord*128-int(self.camera_pos[0])%128+64)
                offset_vertical = (y_coord*128-int(self.camera_pos[1])%128+64)
                tile_blit_coords = (
                    w/2+offset_horizontal*math.cos(math.radians(self.angle))+offset_vertical*math.sin(math.radians(self.angle))-(size[0]/2),
                    h/2-offset_horizontal*math.sin(math.radians(self.angle))+offset_vertical*math.cos(math.radians(self.angle))-(size[1]-self.sprites[self.world[tile_coordinates]]["height"])/2-self.sprites[self.world[tile_coordinates]]["height"]
                )
                screen.blit(self.sprites[self.world[tile_coordinates]][self.angle],tile_blit_coords)
            tile_blit_coords = (
                base_tile_blit_coords[0],
                base_tile_blit_coords[1]#+128*math.cos(math.radians(self.angle))-size[1]
            )

            if self.debug:
                pg.draw.polygon(screen,(255,0,0),(
                    base_tile_blit_coords,
                    (base_tile_blit_coords[0]+math.cos(math.radians(self.angle))*128,base_tile_blit_coords[1]-math.sin(math.radians(self.angle))*128),
                    (base_tile_blit_coords[0]+math.sin(math.radians(self.angle))*128+math.cos(math.radians(self.angle))*128,base_tile_blit_coords[1]+math.cos(math.radians(self.angle))*128-math.sin(math.radians(self.angle))*128),
                    (base_tile_blit_coords[0]+math.sin(math.radians(self.angle))*128,base_tile_blit_coords[1]+math.cos(math.radians(self.angle))*128),
                    ),2
                )
                pg.draw.rect(screen,(0,255,0),base_tile_blit_coords+(4,4),2)
                pg.draw.rect(screen,(0,255,0),centered_coords+(4,4),2)
                pos = self.font.render(f"{x_coord}:{y_coord}",True,(0,0,0))
                screen.blit(pos,[centered_coords[0]-pos.get_width()/2,centered_coords[1]-pos.get_height()])
                pos = self.font.render(f"{tile_coordinates[0]}:{tile_coordinates[1]}",True,(0,0,0))
                screen.blit(pos,[centered_coords[0]-pos.get_width()/2,centered_coords[1]+pos.get_height()])
                #screen.blit(self.sprites["player_down"],(w/2-128*2+self.pos[0]-self.camera_pos[0],h/2-128*2+self.pos[1]-self.camera_pos[1]))



        for visible_object in sorted(visible_objects,key=lambda x:x["pos"][1]):
            object_blit_coords = (
                w/2+(visible_object["pos"][0]-self.camera_pos[0])*math.cos(math.radians(self.angle))+(visible_object["pos"][1]-self.camera_pos[1])*math.sin(math.radians(self.angle)),
                h/2-(visible_object["pos"][0]-self.camera_pos[0])*math.sin(math.radians(self.angle))+(visible_object["pos"][1]-self.camera_pos[1])*math.cos(math.radians(self.angle))
            )
            sprite_w,sprite_h = self.sprites[visible_object["type"]][(visible_object["angle"]-self.angle)//5*5%360].get_size()
            
            screen.blit(self.sprites[visible_object["type"]][(self.angle-visible_object["angle"])//5*5%360],(
                object_blit_coords[0]-sprite_w/2,
                object_blit_coords[1]-(sprite_h-self.sprites[visible_object["type"]]["height"])/2-self.sprites[visible_object["type"]]["height"]
            ))
            pg.draw.rect(screen,(0,255,0),object_blit_coords+(4,4),2)

        info_blit_list = []
        info_blit_list.append(self.font.render(self.version,True,(0,0,0)))

        w,h = screen.get_size()
        if controlled_tram != []:
            panel = self.sprites[tram_info[controlled_tram.type]["graphical_properties"]["panel_texture_name"]]
            km_handle = self.sprites[tram_info[controlled_tram.type]["graphical_properties"]["km_handle_texture_name"]]
            scale = tram_info[controlled_tram.type]["graphical_properties"]["panel_scale"]
            mapouts = tram_info[controlled_tram.type]["graphical_properties"]["km_handle_draw_mapouts"]

            screen.blit(panel,(w/2-panel.get_width()/2, h-panel.get_height()))
            screen.blit(km_handle,(w/2-panel.get_width()/2-km_handle.get_width()/2+mapouts[str(controlled_tram.km_pos)]["pos"][0]*scale, h-panel.get_height()-km_handle.get_height()/2+mapouts[str(controlled_tram.km_pos)]["pos"][1]*scale))

            for element in controlled_tram.driver_panel_element_states:

                state = str(controlled_tram.driver_panel_element_states[element])
                screen.blit(self.sprites[controlled_tram.parameters["graphical_properties"]["panel_elements_information"][element]["states"][state]["texture"]],(w/2-panel.get_width()/2+controlled_tram.parameters["graphical_properties"]["panel_elements_information"][element]["states"][state]["pos"][0]*scale,h-panel.get_height()+controlled_tram.parameters["graphical_properties"]["panel_elements_information"][element]["states"][state]["pos"][1]*scale))
            
            if self.debug:
                info_blit_list.append(self.font.render(f"reverser: {controlled_tram.driving_direction}",True,(0,0,0)))
                info_blit_list.append(self.font.render(f"mover: {controlled_tram.movement_direction}",True,(0,0,0)))
                info_blit_list.append(self.font.render(f"velocity: {controlled_tram.velocity}",True,(0,0,0)))

        if self.debug:
            info_blit_list.append(self.font.render(f"x:{self.pos[0]} y:{self.pos[1]} angle:{self.angle}",True,(0,0,0)))
        info_blit_list.append(self.font.render("fps: "+str(int(clock.get_fps())), False, ((255 if clock.get_fps() < 45 else 0), (255 if clock.get_fps() > 15 else 0), 0)))
        for i, line in enumerate(info_blit_list):
            screen.blit(line, (0, 20*i))

        pg.draw.rect(screen,(255,0,0),(w/2-4,h/2-4,8,8))

        pg.display.flip()

    def update(self,screen,world,pressed,keydowns,mouse_pos,mouse_btn,mouse_click,controlled_tram=[]):
        w,h = screen.get_size()
        self.world = world
        
        speed = 1 if not pressed[pg.K_LSHIFT] else 4
        '''
        if pressed[pg.K_DOWN]: 
            self.pos[1]+=speed*math.cos(math.radians(self.angle))
            self.pos[0]-=speed*math.sin(math.radians(self.angle))
        elif pressed[pg.K_UP]: 
            self.pos[1]-=speed*math.cos(math.radians(self.angle))
            self.pos[0]+=speed*math.sin(math.radians(self.angle))
        if pressed[pg.K_LEFT]: self.ficticious_angle += 2
        elif pressed[pg.K_RIGHT]: self.ficticious_angle -= 2
        if not 0 <= self.ficticious_angle < 360: self.ficticious_angle%=360
        self.angle = self.ficticious_angle//15*15
        ''' #obsolete code of нормальный поворот instead of fixed look
        if self.controlling_tram == -1:
            if pressed[pg.K_DOWN]: 
                self.pos[1]+=speed*math.cos(math.radians(self.angle))
                self.pos[0]-=speed*math.sin(math.radians(self.angle))
            if pressed[pg.K_UP]: 
                self.pos[1]-=speed*math.cos(math.radians(self.angle))
                self.pos[0]+=speed*math.sin(math.radians(self.angle))
            if pressed[pg.K_LEFT]: 
                self.pos[1]+=speed*math.sin(math.radians(self.angle))
                self.pos[0]-=speed*math.cos(math.radians(self.angle))
            if pressed[pg.K_RIGHT]: 
                self.pos[1]-=speed*math.sin(math.radians(self.angle))
                self.pos[0]+=speed*math.cos(math.radians(self.angle)) 
        else:
            panel = self.sprites[controlled_tram.parameters["graphical_properties"]["panel_texture_name"]]
            scale = controlled_tram.parameters["graphical_properties"]["panel_scale"]
            self.pos = [controlled_tram.pos[0],controlled_tram.pos[1]]
            self.angle = 0
            if pressed[pg.K_ESCAPE]: 
                self.controlling_tram = -1
                self.angle = 0

            if pg.K_DOWN in keydowns: 
                controlled_tram.km_pos -= 1 if controlled_tram.parameters["technical_properties"]["km_boundaries"][0] < controlled_tram.km_pos else 0
            if pg.K_UP in keydowns: 
                controlled_tram.km_pos += 1 if controlled_tram.parameters["technical_properties"]["km_boundaries"][1] > controlled_tram.km_pos else 0

            for element in controlled_tram.driver_panel_element_states:
                if controlled_tram.parameters["graphical_properties"]["panel_elements_information"][element]["type"] in controlled_tram.parameters["graphical_properties"]["clickable_ui_elements"]:
                    state = str(controlled_tram.driver_panel_element_states[element])
                    full_info = controlled_tram.parameters["graphical_properties"]["panel_elements_information"][element]
                    if mouse_pos[0] > w/2-panel.get_width()/2+(full_info["states"][state]["pos"][0])*scale and mouse_pos[1] > h-panel.get_height()+(full_info["states"][state]["pos"][1])*scale and mouse_pos[0] < w/2-panel.get_width()/2+(full_info["states"][state]["pos"][0]+full_info["states"][state]["collision_box"][0])*scale and mouse_pos[1] < h-panel.get_height()+(full_info["states"][state]["pos"][1]+full_info["states"][state]["collision_box"][1])*scale:
                        if controlled_tram.parameters["graphical_properties"]["panel_elements_information"][element]["type"] == "switch" and mouse_click:  
                            controlled_tram.driver_panel_element_states[element] = "off" if controlled_tram.driver_panel_element_states[element] == "on" else "on"
                            controlled_tram.train_flags[full_info["controlling"]] = True if controlled_tram.driver_panel_element_states[element] == "on" else False
                        if full_info["type"] == "button":
                            if (mouse_btn[0] or mouse_btn[2]):
                                controlled_tram.driver_panel_element_states[element] = "on"
                                controlled_tram.train_flags[full_info["controlling"]] = True
                            else:
                                controlled_tram.driver_panel_element_states[element] = "off"
                                controlled_tram.train_flags[full_info["controlling"]] = False
                        if full_info["type"] == "switch_reverser" and mouse_click:
                            if mouse_btn[0] and controlled_tram.train_flags[full_info["controlling"]] < 1:
                                controlled_tram.driver_panel_element_states[element] += 1
                                controlled_tram.train_flags[full_info["controlling"]] += 1
                                controlled_tram.driving_direction += 1
                            elif mouse_btn[2] and controlled_tram.train_flags[full_info["controlling"]] > -1:
                                controlled_tram.driver_panel_element_states[element] -= 1
                                controlled_tram.train_flags[full_info["controlling"]] -= 1
                                controlled_tram.driving_direction -= 1
                    else:
                        if full_info["type"] == "button" and not(mouse_btn[0] or mouse_btn[2]):
                            controlled_tram.driver_panel_element_states[element] = "off"
                            controlled_tram.train_flags[full_info["controlling"]] = False


        if pg.K_d in keydowns: self.debug = not(self.debug)

        self.camera_pos = [self.pos[0],self.pos[1]]
        return controlled_tram